// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A compliance check AI agent.
 *
 * - complianceCheck - A function that handles the compliance check process.
 * - ComplianceCheckInput - The input type for the complianceCheck function (imported from types file).
 * - ComplianceCheckOutput - The return type for the complianceCheck function (imported from types file).
 */

import {ai} from '@/ai/genkit';
// Import schemas and types from the new types file
import { 
  ComplianceCheckInputSchema, 
  type ComplianceCheckInput, 
  ComplianceCheckOutputSchema,
  type ComplianceCheckOutput 
} from './compliance-check-types'; 

// Note: DetailedCheckSchema is used internally by ComplianceCheckOutputSchema, so it's fine in the types file.

export async function complianceCheck(input: ComplianceCheckInput): Promise<ComplianceCheckOutput> {
  // In a real scenario, a reportId might be generated here before or after AI processing
  const flowResult = await complianceCheckFlow(input);
  return {
    ...flowResult,
    // reportId: `rep_${new Date().getTime()}` // Example: Generate a mock report ID (AI is asked not to generate it)
  };
}

const complianceCheckPrompt = ai.definePrompt({
  name: 'complianceCheckPrompt',
  input: {schema: ComplianceCheckInputSchema}, // Use imported schema
  output: {schema: ComplianceCheckOutputSchema}, // Use imported schema
  prompt: `You are an expert compliance officer specializing in Digital Product Passport (DPP) data.
Your task is to meticulously analyze the provided 'Product Data' (in JSON format) against the 'Compliance Standards' (a list of directives, regulations, and requirements).

Product Data:
\`\`\`json
{{{productData}}}
\`\`\`

Compliance Standards:
\`\`\`text
{{{complianceStandards}}}
\`\`\`

Based on your analysis, provide a detailed compliance report.
The output MUST conform to the JSON schema defined for ComplianceCheckOutput.

Key instructions for your analysis and report structure:
1.  **Overall Status**: Determine if the product is 'Compliant', 'Partially Compliant', or 'Non-Compliant' overall. Use 'Error' if the input data is insufficient for analysis.
2.  **Summary**: Write a brief, high-level summary of the findings.
3.  **Detailed Checks**: For each standard/directive listed in 'ComplianceStandards':
    *   Create a corresponding object in the 'detailedChecks' array.
    *   'standard': State the full name of the standard/directive.
    *   'status': Assign 'Compliant', 'Non-Compliant', 'Partially Compliant', 'Not Assessed' (if product data lacks info for this standard), or 'Requires Attention' (if data is ambiguous or needs external verification).
    *   'findings': Provide specific observations.
        *   If 'Compliant': Briefly explain how product data meets the standard (e.g., "CE mark is true in product data, Declaration of Conformity DOC-ES2K-20250601 is listed in standards.").
        *   If 'Non-Compliant': Clearly state the deficiency (e.g., "Required RoHS Test Certificate ROS-GT-0325 is mentioned in standards but not found or confirmed in product data.").
        *   If 'Partially Compliant': Explain what is compliant and what is not.
        *   If 'Not Assessed': State that assessment was not possible due to missing information in product data for this specific standard.
        *   If 'Requires Attention': Highlight areas needing further checks or clarification.
    *   'evidence': Provide an array of strings. These should be:
        *   JSON paths pointing to relevant sections in the 'Product Data' (e.g., "compliance.CE", "materials[1].recycled_content_percent", "hazardous_substances.rohs.lead").
        *   Names of documents if they are mentioned in the 'Compliance Standards' and their presence is being verified (e.g., "Declaration of Conformity: DOC-ES2K-20250601").
        *   Use an empty array if no direct evidence path is applicable or if it's a general assessment.
    *   'recommendations': (Optional) Suggest actions if issues are found.

Prioritize verifying the presence and correctness of information explicitly mentioned (e.g., specific document IDs, substance percentages, compliance flags like CE: true).
Analyze the product data strictly against the provided compliance standards. Do not assume external knowledge beyond what's given.
Be very precise with evidence paths.
If a standard in the 'Compliance Standards' list implies multiple sub-checks (e.g., CE marking covering EMC, LVD, RED), try to address them or note if the product data gives enough detail.
The 'reportId' field in the output schema should be left empty or omitted; the system will assign it. You do not need to generate it.
`,
});

const complianceCheckFlow = ai.defineFlow(
  {
    name: 'complianceCheckFlow',
    inputSchema: ComplianceCheckInputSchema, // Use imported schema
    outputSchema: ComplianceCheckOutputSchema, // Use imported schema
  },
  async (input) => {
    const {output} = await complianceCheckPrompt(input);
    // The AI's direct output should already match ComplianceCheckOutputSchema if the prompt is effective
    return output!;
  }
);
